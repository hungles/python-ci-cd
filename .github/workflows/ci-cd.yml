name: Python CI/CD in GitHub Actions

on:
  push:
    branches:
      - dev
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Instalar dependencias
        run: pip install -r requirements.txt

      - name: Ejecutar tests
        run: pytest

  docker-deploy-master:
    if: github.ref == 'refs/heads/master'
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Construir imagen Docker
        run: docker build -t hunglespro/python-ci-cd:prod-${{ github.sha }} .

      - name: Login en DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Subir imagen
        run: docker push hunglespro/python-ci-cd:prod-${{ github.sha }}
  
  docker-deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Construir imagen Docker
        run: docker build -t hunglespro/python-ci-cd:staging-${{ github.sha }} .

      - name: Login en DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Subir imagen
        run: docker push hunglespro/python-ci-cd:staging-${{ github.sha }}

  deploy-k8-staging:
    if: github.ref == 'refs/heads/staging'
    needs: docker-deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configurar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Crear kubeconfig
        run: |
          mkdir -p $HOME/.kube
          printf "%s" "${{ secrets.KUBE_CONFIG_DATA }}" > $HOME/.kube/config-remoto
          chmod 600 $HOME/.kube/config-remoto
        
      - name: Validar cluster
        run: kubectl --kubeconfig=$HOME/.kube/config-remoto get nodes

      - name: Aplicar manifests
        run: |
          kubectl --kubeconfig=$HOME/.kube/config-remoto apply -f k8s/staging/k8s-deployment.yml
          kubectl --kubeconfig=$HOME/.kube/config-remoto apply -f k8s/staging/k8s-service.yml
      
      - name: Actualizar imagen en manifiesto
        run: |
          kubectl set image deployment/stag-python-ci-cd-deploy python-ci-cd=hunglespro/python-ci-cd:staging-${{ github.sha }}

      - name: Dormir para esperar despliegue
        run: sleep 60

      - name: Ver pods
        run: kubectl get pods

      - name: Ver servicios
        run: kubectl get services

  deploy-k8-master:
    if: github.ref == 'refs/heads/master'
    needs: docker-deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Crear kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Configurar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
        
      - name: Validar cluster
        run: kubectl get nodes

      - name: Aplicar manifests
        run: |
          kubectl apply -f k8s/prod/k8s-deployment.yml
          kubectl apply -f k8s/prod/k8s-service.yml
      
      - name: Actualizar imagen en manifiesto
        run: |
          kubectl set image deployment/prod-python-ci-cd-deploy python-ci-cd=hunglespro/python-ci-cd:prod-${{ github.sha }}

      - name: Dormir para esperar despliegue
        run: sleep 60

      - name: Ver pods
        run: kubectl --kubeconfig=$HOME/.kube/config-remoto get pods

      - name: Ver servicios
        run: kubectl --kubeconfig=$HOME/.kube/config-remoto get services
